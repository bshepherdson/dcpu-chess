; Implementations of the chess rules - move generation and validation, etc.

.macro to_rank=shr %0, 3
.macro to_file=and %0, 7
.macro to_side=shr %0, 3
.macro negate=xor %0, -1 %n add %0, 1

; Expects selected to point at a piece to move, and cursor to be on the target
; space.
; Many pieces can move any distance in a variety of directions, but are blocked
; by other pieces. The generic way to handle that is with a "ray", an index
; delta that we repeatedly evaluate until we either:
; - Hit the edge of the board,
; - Hit an ownside piece - illegal move.
; - Hit an enemy piece - legal capture, but if it's not the target space then
;   this ray has failed.
; Knights and pawns have very special rules. Kings move to a fixed set of
; spaces, which I just check directly.
:validate_move ; () -> valid?
set a, [cursor]
jsr check_landing
ife a, 0
  set pc, pop ; Fail out

; Now check that it's legal for the moving piece to actually get there.
set a, [selected]
set a, [board + a]
and a, 7
set pc, [a + move_validators] ; Tail call


; Move validators for each piece.
:move_validators
.dat 0
.dat mv_pawn
.dat mv_rook
.dat mv_knight
.dat mv_bishop
.dat mv_queen
.dat mv_king


:rfalse ; Generic helper that sets A to 0 and returns.
set a, 0
set pc, pop

:rtrue ; Generic helper that sets A to 1 and returns.
set a, 1
set pc, pop


; Second attempt at pawn move validation. Regardless of the board position, we
; can make decisions just on the numeric difference between the pieces.
:mv_pawn ; () -> valid?
set b, [turn]
set b, [b + pawn_deltas] ; B is the delta for a pawn move.
set a, [cursor]
ife [a+board], 0
  set pc, mv_pawn_nocap

; This is a capture, so it must be a diagonal.
set c, [selected]
add b, c ; B is now the delta-adjusted position, should be +/- 1 from cursor.
sub b, a

ife b, 1
  set pc, mv_check_diag_legal
ife b, -1
  set pc, mv_check_diag_legal

; Otherwise it's illegal for sure.
set pc, rfalse

; Need to check that A+B (the landing site) is in the same row as A (one delta
; ahead)
:mv_check_diag_legal
set c, a
add c, b ; A is now the base position and C is the actual target square.
and a, 0xfff8 ; Flatten them both to rows.
and c, 0xfff8 ; They should be equal now.
ife a, c
  set pc, rtrue
set pc, rfalse



:mv_pawn_nocap ; If this is not a capture, then the target needs to be 1 or 2
               ; deltas from the base position.
set c, [selected]
add c, b ; Adjusting for delta.
ife c, a
  set pc, rtrue ; Single step, so valid.

; First, check that this middle space is clear, since we can't jump a piece.
ifn [c+board], 0
  set pc, rfalse

add c, b ; Add another delta in.
ifn c, a
  set pc, rfalse ; Definitely wrong if not there.

; If it is two steps ahead, I need to check the source (A) was in my own second
; rank. I flatten to the row number, then compare with the pawn_2nd_ranks table.
set a, [selected]
and a, 0xfff8
set b, [turn]
set b, [b + pawn_2nd_ranks]
ife a, b
  set pc, rtrue
set pc, rfalse

:pawn_deltas .dat -8, 8 ; White then black.
:pawn_2nd_ranks .dat 48, 8 ; White then black.

; TODO: Add bits for each side's pawns, for capturing en passant. Those captures
; can only be made the move immediately after the pawn double-moved, and only by 
; other pawns.

; Rooks move laterally in a straight line, limited only by other pieces and the
; board edge. We check that the source and destination squares share a rank or
; file, then whether there's anything in between.
:mv_rook
set a, [selected]
to_rank a
set b, [cursor]
to_rank b
ife a, b
  set pc, mv_rook_rank

set a, [selected]
to_file a
set b, [cursor]
to_file b
ifn a, b
  set pc, rfalse ; If the file doesn't match either, no dice.

; Matching files, so set the delta. It's either 8 or -8.
set c, 8
ifl [cursor], [selected]
  set c, -8
set pc, mv_rook_ray

:mv_rook_rank ; Common rank.
; The elta is either 1 or -1.
set c, 1
ifl [cursor], [selected]
  set c, -1

:mv_rook_ray ; C is the delta. Start from selected, move to cursor.
set a, [selected]
set b, [cursor]

:mv_rook_ray_loop
add a, c ; Move one slot immediately, or we'll bail when we see ourself.
ife a, b
  set pc, rtrue ; Match, so stop.
ifn [board+a], 0
  set pc, rfalse ; Intervening piece, so invalid.
set pc, mv_rook_ray_loop


; Bishops move like rooks, but diagonally. The absolute rank and file
; differences between start and end positions must be equal.
:mv_bishop
set a, [selected]
to_file a
set b, [cursor]
to_file b
sub b, a
set c, b ; C is the difference in files.

set a, [selected]
to_rank a
set b, [cursor]
to_rank b
sub b, a ; B is the difference in ranks.

ife b, c
  set pc, mv_bishop_ray

set a, 0
sub a, c ; A = -C
ifn a, b
  set pc, rfalse

:mv_bishop_ray ; At this point, they share a diagonal. C is the file difference,
               ; B is the rank difference.
; The bishop's ray delta is plus or minus, 7 or 9. We start with +/- 8 based on
; the rank difference.
set a, 8
ifu b, 0 ; Negative rank difference means the destination is above the start.
  set a, -8 ; So we use a negative delta.

ifu c, 0 ; Negative file difference means destination left of start.
  sub a, 1  ; So we knock one off.
ifa c, 0 ; Positive file difference means dest right of start.
  add a, 1  ; So we add one on.

; Now A is the correct delta.
set b, [selected]
set c, [cursor]

:mv_bishop_ray_loop
add b, a ; Start with a bump, so we're not examining ourself.
ife b, c
  set pc, rtrue
ifn [b+board], empty
  set pc, rfalse
set pc, mv_bishop_ray_loop



:mv_queen
; The queen is either a rook or bishop.
jsr mv_rook
ife a, 0
  jsr mv_bishop
set pc, pop

; Kings move one space only, in any direction.
; They can move two spaces only when castling.
; They cannot put themselves in check.
:mv_king
set a, [selected]
to_rank a
set b, [cursor]
to_rank b
sub b, a
ifu b, -1
  set pc, rfalse
ifa b, 1
  set pc, rfalse

; Regular king moves.
set a, [selected]
to_file a
set b, [cursor]
to_file b
sub b, a
ifu b, -1
  set pc, mv_king_check_castling
ifa b, 1
  set pc, mv_king_check_castling

; Kings can't move into check, so see if their target square is under attack by
; the enemy.
set a, [cursor]
set b, [turn]
xor b, 1 ; Flip B to be the enemy team, not the currently-moving team.
jsr under_attack
; Invert the result.
ifn a, 0
  set pc, rfalse ; Under attack means moving into check - illegal.
set pc, rtrue ; Otherwise, it's legal.



; The king is moving too far left/right, so this might be a legal castle.
; The conditions are:
; - king is moving two spaces, left or right.
; - there are no pieces between the king and the rook on that side.
; - the spaces the king is in, moving through, and landing in are free of check.
; - neither the king nor the rook on that side have ever moved.
:mv_king_check_castling
set a, [cursor]
sub a, [selected]
ife a, -2
  set pc, mv_king_castle_left
ife a, 2
  set pc, mv_king_castle_right
set pc, rfalse ; Not a castling move, so illegal.

:mv_king_castle_left
; First, check that castling is possible, bitwise.
set a, [turn]
set a, [castling_table+a]
and a, 0x11 ; Bits 0 and 4 set for a left-side castle.
ifn a, 0
  set pc, rfalse ; Castling not legal: pieces have moved.

; Next, check that the space in between is clear.
set a, [selected]
sub a, 1
ifn [a+board], empty
  set pc, rfalse
sub a, 1
ifn [a+board], empty
  set pc, rfalse
sub a, 1
ifn [a+board], empty
  set pc, rfalse

; Now we re-combine, since the remaining checks are symmetric.
set a, [cursor] ; Leftmost square of the three to check.
jsr mv_castling_check_check
ifn a, 0 ; Check detected!
  set pc, rfalse

; If we're still here, a left castle is legal, so do it.
; We implement this by returning true.
; The post-move code for the king will move the rook, on seeing a king moving
; two spaces.
set pc, rtrue


:mv_king_castle_right
; First, check that castling is possible, bitwise.
set a, [turn]
set a, [castling_table+a]
and a, 0x90 ; Bits 7 and 4 set for a right-side castle.
ifn a, 0
  set pc, rfalse ; Castling not legal: pieces have moved.

; Next, check that the space in between is clear.
set a, [selected]
add a, 1
ifn [a+board], empty
  set pc, rfalse
add a, 1
ifn [a+board], empty
  set pc, rfalse

; Now we re-combine, since the remaining checks are symmetric.
set a, [selected] ; Leftmost square of the three to check.
jsr mv_castling_check_check
ifn a, 0 ; Check detected!
  set pc, rfalse

; If we're still here, a right castle is legal, so do it.
; We implement this by returning true.
; The post-move code for the king will move the rook, on seeing a king moving
; two spaces.
set pc, rtrue



; Expects A to be the leftmost of the three spaces to check for being in check.
:mv_castling_check_check
set push, a
set b, [turn]
xor b, 1 ; Toggle the turn.
jsr under_attack
ifn a, 0
  set pc, mv_castling_check_check_fail

set a, peek
add a, 1
set b, [turn]
xor b, 1
jsr under_attack
ifn a, 0
  set pc, mv_castling_check_check_fail

set a, peek
add a, 2
set b, [turn]
xor b, 1
jsr under_attack
ifn a, 0
  set pc, mv_castling_check_check_fail

; If we got down here, we succeeded.
set a, pop
set a, 0
set pc, pop

:mv_castling_check_check_fail
set a, pop
set a, 1
set pc, pop



; Next, check that the king's three spaces are free of check.
set b, [turn]
xor b, 1 ; Other side.
set push, b ; Save the side.

set a, [selected]
jsr under_attack
ifn a, 0
  set pc, rfalse ; Under attack, no dice.

set a, [selected]
sub a, 1
set b, peek
jsr under_attack
ifn a, 0
  set pc, rfalse ; Under attack, no dice.

; Knights move 2 spaces in one dimension and 1 in the other. I compute the
; absolute differences, and check them. Since knights can jump, no other
; restrictions are required.
:mv_knight
set a, [selected]
to_rank a
set b, [cursor]
to_rank b
sub b, a

set c, b
ifa c, 0
  set pc, mv_knight_1
negate c

:mv_knight_1
set a, [selected]
to_file a
set b, [cursor]
to_file b
sub b, a

ifa b, 0
  set pc, mv_knight_2
negate b

:mv_knight_2
; Now both are positive differences. If one is 2 and the other 1, it's valid.
ife b, 2
  ife c, 1
    set pc, rtrue
ife b, 1
  ife c, 2
    set pc, rtrue
set pc, rfalse


; Returns 1 for empty tiles, 0 for ownside pieces, and -1 for captures.
:check_landing ; (index) -> tri-flag
set b, board
add b, a
set a, 1
ife [b], empty
  set pc, pop ; Returns 1 for empty tiles.

; Otherwise, it's a piece. Check its side.
set b, [b]
shr b, 3 ; Move the owner bit to bit 0
set a, -1
ifn b, [turn]
  set pc, pop ; Returns -1 for capture.

; Otherwise it's an ownside piece: illegal landing.
set a, 0
set pc, pop


; Some helper functions, which eg. call a given function for each piece, or each
; piece of a particular colour.

; Calls the given function for each piece found on the board.
:each_piece ; (fn(square)-> void) -> void
set push, x
set push, a
set x, 0
:each_piece_loop
set a, x
jsr peek
add x, 1
ifl x, 64
  set pc, each_piece_loop
set a, pop
set x, pop
set pc, pop


; Given a function from a square to a boolean, return true if the function is
; true for any piece, and false otherwise.
:any_piece ; ( fn(square) -> bool ) -> bool
set push, x
set push, a
set x, 0
:any_piece_loop
set a, x
jsr peek
ifn a, 0
  set pc, any_piece_done

add x, 1
ifl x, 64
  set pc, any_piece_loop

:any_piece_done
set c, pop ; Dump the TOS.
set x, pop
set pc, pop


; Returns 1 if the given side can attack the given square.
; For example, if the location of the black king is given, and white is given as
; the side, this functino returns 1 if the black king is in check.
:under_attack ; (square, side) -> attacked?
set [under_attack_target], a
set push, [turn]
set [turn], b
set a, can_move
jsr any_piece ; tail call
set [turn], pop
set pc, pop


; The square that's currently under attack.
:under_attack_target .dat 0


; This is the lambda for under_attack's any_piece call.
:can_move ; (square) -> bool?
set b, [board+a] ; B is the actual piece.
ife b, 0
  set pc, rfalse ; Bail if it's empty.
to_side b
ifn b, [turn]
  set pc, rfalse ; Not a piece of the attacking side.

; Now check if our target piece can attack the target square.
set push, [selected]
set push, [cursor]  ; Save these for reentrancy.
set [selected], a ; The source square.
set [cursor], [under_attack_target]
jsr validate_move
; If the move is valid, then this piece can attack the target square.
set [cursor], pop
set [selected], pop
set pc, pop



; Finds a specific piece (usually a king). This matches the first (reading left
; to right, top down) piece of this type found on the board.
; Returns -1 if none is found.
:find_piece ; (piece) -> square
set b, a
set a, 0
:find_piece_loop
ife b, [a+board]
  set pc, pop
add a, 1
ifl a, 64
  set pc, find_piece_loop

set a, -1
set pc, pop



; Post-move bookkeeping. Necessary for castling, en passant and pawn captures.
; Expects [selected] and [cursor] to still be set correctly for the move, but
; the move to have been made (eg. [selected] is empty and [cursor] contains our
; piece).
:post_move_updates
.dat 0
.dat post_mv_pawn
.dat post_mv_rook
.dat post_mv_knight
.dat post_mv_bishop
.dat post_mv_queen
.dat post_mv_king

; En-passant and pawn promotions. If the pawn just did a double move, we need to
; mark it as en-passant. Those bits are cleared by pre-move code for each side.
:post_mv_pawn
; Check if we landed in an outer rank: pawn promotion.
set a, [cursor]
to_rank a
ife a, 0
  set pc, post_mv_pawn_promote
ife a, 7
  set pc, post_mv_pawn_promote

; Otherwise, check if we're leaving my own side's second rank.
set a, [selected]
to_rank a
ife a, 1
  ife [turn], black
    set pc, post_mv_pawn_en_passant
ife a, 6
  ife [turn], white
    set pc, post_mv_pawn_en_passant

; If we're still here, there's nothing special.
set pc, pop

; Our pawn is landing in the final rank and is auto-promoted to queen.
; TODO: Add UI for choosing the new piece.
:post_mv_pawn_promote
set b, black_queen
ife [turn], white
  set b, white_queen
set a, [cursor]
set [a+board], b
set pc, pop

; Check if our pawn just moved two ranks, and set the en passant bit if so.
; TODO Implement me! Currently ignored.
:post_mv_pawn_en_passant
set pc, pop



; Castling is only possible if the pieces involved have never moved.
; Therefore each rook, and the king, get bits in this table.
; The bits used are the same as their starting files: bit 0 is the left rook,
; bit 4 is the king, bit 7 is the right rook.
; These bits start out clear, but then get set when the pieces have moved.
:castling_table .dat 0, 0

:post_mv_rook
set a, [selected]
to_file a
ifn a, 0
  ifn a, 7
    set pc, pop

set b, 1
shl b, a
set c, [turn]
bor [c+castling_table], b
set pc, pop

:post_mv_knight ; Nothing special.
set pc, pop

:post_mv_bishop ; Nothing special.
set pc, pop

:post_mv_queen ; Nothing special.
set pc, pop

; Set the king's can't-castle-now bit.
; If the last move was a castle, then the king will have moved two spaces.
; In that case, we move the appropriate rook.
:post_mv_king
set c, [turn]
bor [c+castling_table], 0x10

set a, [selected]
sub a, [cursor]
ife a, -2 ; castling right
  set pc, post_mv_king_castle_right
ife a, 2  ; castling left
  set pc, post_mv_king_castle_left
set pc, pop

:post_mv_king_castle_right
set a, [cursor]
and a, 0xfff8 ; Select just the rank.
set b, a
add b, 7 ; B is the rook.
add a, 5 ; A is the destination.
set [a+board], [b+board]
set [b+board], empty
set pc, pop

:post_mv_king_castle_left
set a, [cursor]
and a, 0xfff8 ; Select just the rank.
set b, a ; B is the rook.
add a, 3 ; A is the destination.
set [a+board], [b+board]
set [b+board], empty
set pc, pop

