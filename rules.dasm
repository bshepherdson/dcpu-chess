; Implementations of the chess rules - move generation and validation, etc.

; Expects selected to point at a piece to move, and cursor to be on the target
; space.
; Many pieces can move any distance in a variety of directions, but are blocked
; by other pieces. The generic way to handle that is with a "ray", an index
; delta that we repeatedly evaluate until we either:
; - Hit the edge of the board,
; - Hit an ownside piece - illegal move.
; - Hit an enemy piece - legal capture, but if it's not the target space then
;   this ray has failed.
; Knights and pawns have very special rules. Kings move to a fixed set of
; spaces, which I just check directly.
:validate_move ; () -> valid?
set a, [cursor]
jsr check_landing
ife a, 0
  set pc, pop ; Fail out

; Now check that it's legal for the moving piece to actually get there.
set a, [selected]
set a, [board + a]
and a, 7
set pc, [a + move_validators] ; Tail call


; Move validators for each piece.
:move_validators
.dat 0
.dat mv_pawn
.dat mv_rook
.dat mv_knight
.dat mv_bishop
.dat mv_queen
.dat mv_king


:mv_invalid ; Generic helper that sets A to 0 and returns.
set a, 0
set pc, pop

:mv_valid ; Generic helper that sets A to 1 and returns.
set a, 1
set pc, pop


; Second attempt at pawn move validation. Regardless of the board position, we
; can make decisions just on the numeric difference between the pieces.
:mv_pawn ; () -> valid?
set b, [turn]
set b, [b + pawn_deltas] ; B is the delta for a pawn move.
set a, [cursor]
ife [a+board], 0
  set pc, mv_pawn_nocap

; This is a capture, so it must be a diagonal.
set c, [selected]
add b, c ; B is now the delta-adjusted position, should be +/- 1 from cursor.
sub b, a

ife b, 1
  set pc, mv_check_diag_legal
ife b, -1
  set pc, mv_check_diag_legal

; Otherwise it's illegal for sure.
set pc, mv_invalid

; Need to check that A+B (the landing site) is in the same row as A (one delta
; ahead)
:mv_check_diag_legal
set c, a
add c, b ; A is now the base position and C is the actual target square.
and a, 0xfff8 ; Flatten them both to rows.
and c, 0xfff8 ; They should be equal now.
ife a, c
  set pc, mv_valid
set pc, mv_invalid



:mv_pawn_nocap ; If this is not a capture, then the target needs to be 1 or 2
               ; deltas from the base position.
set c, [selected]
add c, b ; Adjusting for delta.
ife c, a
  set pc, mv_valid ; Single step, so valid.

; First, check that this middle space is clear, since we can't jump a piece.
ifn [c+board], 0
  set pc, mv_invalid

add c, b ; Add another delta in.
ifn c, a
  set pc, mv_invalid ; Definitely wrong if not there.

; If it is two steps ahead, I need to check the source (A) was in my own second
; rank. I flatten to the row number, then compare with the pawn_2nd_ranks table.
set a, [selected]
and a, 0xfff8
set b, [turn]
set b, [b + pawn_2nd_ranks]
ife a, b
  set pc, mv_valid
set pc, mv_invalid

:pawn_deltas .dat -8, 8 ; White then black.
:pawn_2nd_ranks .dat 48, 8 ; White then black.


:mv_rook
set pc, mv_valid

:mv_knight
set pc, mv_valid

:mv_bishop
set pc, mv_valid

:mv_queen
set pc, mv_valid

:mv_king
set pc, mv_valid


; Returns 1 for empty tiles, 0 for ownside pieces, and -1 for captures.
:check_landing ; (index) -> tri-flag
set b, board
add b, a
set a, 1
ife [b], empty
  set pc, pop ; Returns 1 for empty tiles.

; Otherwise, it's a piece. Check its side.
set b, [b]
shr b, 3 ; Move the owner bit to bit 0
set a, -1
ifn b, [turn]
  set pc, pop ; Returns -1 for capture.

; Otherwise it's an ownside piece: illegal landing.
set a, 0
set pc, pop

