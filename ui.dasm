; Renders a board into VRAM. Global offset of the chess board in the VRAM space
; is given by the variables board_x and board_y.

:board_x .dat 0
:board_y .dat 0

.def fg_white, 1 ; bright white
.def bg_white, 3 ; medium white
.def fg_black, 0 ; black
.def bg_black, 2 ; full black


:render_board ; (board) -> void
pushXY
set x, a
set y, 0
:render_board_loop
set a, x
set b, y
jsr render_line
add y, 1
ifl y, 8
  set pc, render_board_loop
retXY


:render_line ; (board, line#) -> void
pushXYZ
set x, a
set y, b
set z, 0
:render_line_loop
set a, x
set b, y
set c, z
jsr render_piece
add z, 1
ifl z, 8
  set pc, render_line_loop

retXYZ



:render_piece ; (board, line, col) -> void
pushXYZ
set x, [board_y]
add x, b
shl x, 5 ; *=32
add x, [board_x]
add x, c
add x, c ; Yes, do this twice: Each piece takes up 2 characters.
add x, vram ; X is now the target address in VRAM.

set y, b
shl y, 3 ; *= 8
add y, c
add a, y ; [A] is the piece to be rendered.

set y, [a]
and y, 7     ; Y is just the piece number.
shl y, 1     ; Which we shift up one, to make it the font index.
set z, y     ; Which we save to Z.

; Set the background colour based on the board position.
; And the foreground based on the piece's colour bit.

; The board tile is white if its row XOR column has bit 0 clear, black if set.
xor b, c
set c, bg_white
ifb b, 1
  set c, bg_black

shl c, 8 ; Shift it to the background.
bor z, c

; [A] is still the piece we want. Pieces are black if bit 3 is set.
set c, fg_white
ifb [a], 8
  set c, fg_black

shl c, 12 ; Shift to foreground.
bor z, c

; Now we write Z to [X] and Z+1 to [X+1], actually writing to VRAM.
set [x], z
add z, 1
set [x+1], z

retXYZ


:rank_labels .dat 0x1038, 0x1037, 0x1036, 0x1035
             .dat 0x1034, 0x1033,0x1032, 0x1031
:file_labels .dat 0x1061, 0x1062, 0x1063, 0x1064,
             .dat 0x1065, 0x1066,0x1067, 0x1068
.def rank_delta, 32
.def file_delta, 2




; Draws the numbers and letters for the ranks and files.
:label_board ; () -> void
set a, 0
set b, 8 ; Off the edge
jsr pos_to_vram ; A is the address in VRAM.

set b, rank_labels
set c, rank_delta
jsr label_strip ; Labels the ranks (rows)

set a, 8
set b, 0
jsr pos_to_vram
add a, 1
set b, file_labels
set c, file_delta
set pc, label_strip ; tail call; labels the files (columns)


:label_strip ; (VRAM addr, label addr, delta) -> void
pushX
set x, 8
:label_strip_loop
set [a], [b]
add a, c
add b, 1
sub x, 1
ifg x, 0
  set pc, label_strip_loop
retX



; Drawing informational text on the screen.
:white_turn .dat 0x5054, 0x5075, 0x5072, 0x506e, 0x503a, 0x5020
            .dat 0x1057, 0x1068, 0x1069, 0x1074, 0x1065
:black_turn .dat 0x5054, 0x5075, 0x5072, 0x506e, 0x503a, 0x5020
            .dat 0x0142, 0x016c, 0x0161, 0x0163, 0x016b
:turn_text .dat white_turn, black_turn

; Prints the current turn in the upper right.
:print_turn ; () ->
set b, vram + 32 + 20
set a, [turn]
set a, [a + turn_text]
set c, 11
set pc, copy ; Tail call



; Returns the address in VRAM of the (left side of the) given tile on the board.
:pos_to_vram ; (row, col) -> addr
shl b, 1 ; Two spaces per column.
shl a, 5 ; 32 words per row.
add a, [board_y]
add b, [board_x]
add a, vram
add a, b
set pc, pop



; Cursor control.
; The cursor moves within the game board only. Its board-relative, 0-based
; coordinates are stored in cursor_x and cursor_y.
; The cursor moves with the arrow keys and it appears as a blue background.
:cursor_x .dat 3
:cursor_y .dat 7

.def bg_cursor, 4

; Finds the cursor's current position and edits that VRAM cell to have the
; cursor's colour. Should be called after render_board.
:render_cursor ; () -> void
set a, [cursor_y]
set b, [cursor_x]
jsr pos_to_vram ; A is now the address of the left cell in VRAM.

set push, a
jsr paint_cursor_bg
set a, pop
add a, 1
set pc, paint_cursor_bg ; Tail call


:paint_cursor_bg ; (addr in vram) -> void
set b, [a]
and b, 0xf0ff ; Mask out the bg slot.
set c, bg_cursor
shl c, 8 ; Shift it to the bg slot.
bor b, c
set [a], b
set pc, pop



; Sets the LEM to use the custom palette.
:set_palette ; () -> void
set a, dev_lem1802
jsr get_device ; A is now the LEM's device number.
set c, a
set a, 2 ; Set palette.
set b, palette
hwi c ; Palette updated!
set pc, pop



; Palettes are 16 words long, each word is 0000 rrrr gggg bbbb.
:palette
.dat 0      ; Black pieces: pure black
.dat 0x0fff ; White pieces: pure white
.dat 0x0930 ; Black squares: brown
.dat 0x0ca5 ; White squares: tan
.dat 0x006f ; Cursor background: medium blue
.dat 0x0aaa ; Medium grey
.reserve 6 ; 6 more blacks to fill up the palette.
